// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String?  // Hex color code
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]

  @@unique([userId, name])
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text // Garde pour la compatibilité
  blocks      Json?    // Stockage des blocs structurés
  isPinned    Boolean  @default(false)
  isArchived  Boolean  @default(false)
  isPublic    Boolean  @default(false)
  tags        String[] // Array of tags
  x           Float?   // Position X pour le mode 2D
  y           Float?   // Position Y pour le mode 2D
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Relations pour les liens entre notes
  linksFrom   NoteLink[] @relation("FromNote")
  linksTo     NoteLink[] @relation("ToNote")
}

model NoteLink {
  id       String @id @default(cuid())
  fromId   String
  toId     String
  label    String? // Label optionnel pour le lien
  createdAt DateTime @default(now())
  
  fromNote Note @relation("FromNote", fields: [fromId], references: [id], onDelete: Cascade)
  toNote   Note @relation("ToNote", fields: [toId], references: [id], onDelete: Cascade)
  
  @@unique([fromId, toId])
}